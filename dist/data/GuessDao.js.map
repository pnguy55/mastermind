{"version":3,"sources":["../../src/data/GuessDao.js"],"names":["GuessDao","constructor","gameDao","GameDao","playerDao","PlayerDao","generateFeedbackAndScore","guess","combination","combinationArray","split","combinationMap","Map","i","length","num","existingNumIndexes","get","push","set","guessArray","feedbackArray","Array","score","has","indexes","index","j","feedback","undefined","join","create","guessCreateInfo","playerId","guessString","activeGameInfo","search","playerInfo","fetch","Error","gameId","playerCount","currentTurn","winner","name","turnNumber","activeGameCombination","winningCombination","guessScore","guessCreateResult","updatePlayerInfo","playerUpdateResult","update","activeGuesses","numberOfActiveGuesses","turnCount","Math","trunc","nextTurn","gameUpdateInfo","winnersByDefault","players","scoreMap","highestScore","player","existingPlayersWithScore","max","deleteAll","err","message","guessSearchCriteria","limit","offset","isHistorical","playerName","includes","where","model","models","as","Op","ne","eq","guessSearchResults","findAll","include","order","guessId","guessFetchResult","findByPk","delete","guessDeleteResult","destroy","guessIds","map"],"mappings":"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","file":"GuessDao.js","sourcesContent":["import { guess } from '../db/sequelize';\nimport { Op } from 'sequelize';\nimport GameDao from './GameDao';\nimport PlayerDao from './PlayerDao';\n\nexport default class GuessDao {\n\tconstructor() {\n    this.gameDao = new GameDao();\n    this.playerDao = new PlayerDao();\n\t}\n  \n  // make a guess\n\n  generateFeedbackAndScore(guess, combination) {\n    const combinationArray = combination.split('|');\n    const combinationMap = new Map();\n    for(let i = 0; i < combinationArray.length; i++) {\n      const num = combinationArray[i];\n      const existingNumIndexes = (combinationMap.get(num) || []);\n      existingNumIndexes.push(i)\n      combinationMap.set(num, existingNumIndexes);\n    }\n\n    const guessArray = guess.split('|');    \n\n    let feedbackArray = new Array(4);\n    let score = 0;\n    for(const num of guessArray) {\n      if(combinationMap.has(num)){\n        const indexes = combinationMap.get(num);\n        for(const index of indexes) {\n          feedbackArray[index] = 'X';\n        }\n        score++;\n      }\n    }\n\n    for(let j = 0; j < feedbackArray.length; j++) {\n      const feedback = feedbackArray[j];\n      if(feedback === undefined) {\n        feedbackArray[j] = 'O';\n      }\n    }\n\n    return [feedbackArray.join('|'), score];\n  }\n\n  async create(guessCreateInfo) {\n    // Create a Guess\n    // Save Guess in the database\n    try {\n\n      // Get game info (only one active game at a time) and player info\n      let { playerId, guess: guessString } = guessCreateInfo;\n      const activeGameInfo = (await this.gameDao.search({}))[0];\n      const playerInfo = await this.playerDao.fetch(playerId);\n\n      // game is over, throw error\n      if(!activeGameInfo) throw new Error('Game is over.  Start a new game.');\n      const { gameId, combination, playerCount, currentTurn, winner} = activeGameInfo;\n      const { name, score, turnNumber } = playerInfo;\n\n\n      // make sure only current player can guess\n      if(currentTurn !== turnNumber) throw new Error(`It is not ${name}'s turn`)\n\n      const activeGameCombination = combination;\n      const winningCombination = activeGameCombination === guessString;\n\n      // TODO: need to implement\n      const [feedback, guessScore] = this.generateFeedbackAndScore(guessString, combination);\n\n      guessCreateInfo.feedback = feedback;\n      const guessCreateResult = await guess.create(guessCreateInfo)\n\n      const updatePlayerInfo = {\n        score: winningCombination ? score + 8 : score + guessScore,\n      }\n      const playerUpdateResult = await this.playerDao.update(playerId, updatePlayerInfo)\n\n      const activeGuesses = (await this.search({})) || [];\n      const numberOfActiveGuesses = activeGuesses.length;\n      const turnCount = numberOfActiveGuesses === 0 ? 0 : Math.trunc(numberOfActiveGuesses / playerCount);\n      const nextTurn = currentTurn + 1 >= playerCount ? 0 : currentTurn + 1;\n      // Case where we hit turn limit.\n      let gameUpdateInfo;\n      let winnersByDefault = winner;\n      if(winningCombination || turnCount === 10) {\n        if(!winningCombination) {\n          const players = await this.playerDao.search({});\n          const scoreMap = new Map();\n          let highestScore = 0;\n          for(const player of players) {\n            let existingPlayersWithScore = scoreMap.get(player.score) || [];\n            existingPlayersWithScore.push(player.name);\n            scoreMap.set(player.score, existingPlayersWithScore)\n            highestScore = Math.max(highestScore, player.score);\n          }\n\n          winnersByDefault = scoreMap.get(highestScore).join(' and ')\n        }\n\n        gameUpdateInfo = {\n          turnCount: turnCount,\n          currentTurn: nextTurn, \n          winner: winningCombination ? name : winnersByDefault,\n        }\n        await this.gameDao.update(gameId, gameUpdateInfo);\n        await this.gameDao.deleteAll();\n\n      }\n      // case of no winner declared by this guess\n      else {\n        gameUpdateInfo = {\n          turnCount: turnCount,\n          currentTurn: nextTurn, \n          winner: winningCombination ? name : winnersByDefault,\n        }\n        await this.gameDao.update(gameId, gameUpdateInfo);\n      }\n\n\n      return guessCreateResult;\n    } catch(err) {\n      throw new Error(err.message || 'Some error occurred while creating the Guess.')\n    }\n  }\n\n  async search(guessSearchCriteria, limit, offset, isHistorical) {\n\n    const { playerName } = guessSearchCriteria;\n\n    const includes = []\n    const where = {};\n\n    if(playerName) {\n      includes.push({\n        model: models.player,\n        as: 'playerName',\n        where: { name: `${playerName}`},\n      });\n    }\n\n    if(isHistorical) where['deletedAt'] = {[Op.ne]: null};\n    else where['deletedAt'] = {[Op.eq]: null};\n\n    try {\n\t\t\tconst guessSearchResults = await guess.findAll({\n        where: where,\n        include: includes,\n        limit: limit || 50, // default: 50\n        offset: offset || 0, // default: 0\n        order: [['guessId', 'DESC']],\n      });\n\t\t\treturn guessSearchResults;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message || 'Some error occurred while retrieving guesses.');\n\t\t}\n  }\n\n  async fetch(guessId) {\n\t\ttry {\n\t\t\tconst guessFetchResult = await guess.findByPk(guessId);\n\n\t\t\tif(guessFetchResult === undefined) {\n\t\t\t\tthrow new Error(`No guess exists with guessId: [${guessId}]`);\n\t\t\t}\n      return guessFetchResult;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message);\n\t\t}\n  }\n\n  async delete(guessId) {\n    try {\n      const guessDeleteResult = await guess.destroy({\n        where: {guessId: guessId}\n      });\n      return [guessId];\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n\n  async deleteAll() {\n    try {\n      const guessIds = (await this.search({})).map(({guessId}) => guessId);\n      await guess.destroy({where: {}});\n      return [guessIds];\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n}"]}