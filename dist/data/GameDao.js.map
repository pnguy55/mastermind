{"version":3,"sources":["../../src/data/GameDao.js"],"names":["GameDao","constructor","playerDao","PlayerDao","randomNumberDao","RandomNumberDao","create","gameCreateInfo","randomNumberCombination","fetch","gameCreateResult","game","err","Error","message","fetchActiveWithPlayersAndGuesses","includes","where","push","all","nested","Op","eq","gameSearchResults","findAll","include","limit","offset","order","search","gameSearchCriteria","isHistorical","allActiveAndHistorical","winnerName","playerName","model","player","as","name","force","paranoid","ne","gameId","gameFetchResult","findByPk","undefined","update","gameUpdateInfo","turnCount","currentTurn","winner","set","gameUpdateResult","save","delete","playerIdsByGame","playerIds","flatMap","players","guess","destroy","playerId","in","deleteAll"],"mappings":"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","file":"GameDao.js","sourcesContent":["import { game, player, guess } from '../db/sequelize';\nimport PlayerDao from './PlayerDao';\nimport RandomNumberDao from './RandomNumberDao';\nimport { Op } from 'sequelize';\n\nexport default class GameDao {\n\tconstructor() {\n    this.playerDao = new PlayerDao();\n    this.randomNumberDao = new RandomNumberDao();\n\t}\n  \n  async create(gameCreateInfo) {\n    // Create a Game\n    // Save Game in the database\n    try {\n\n      // automatically set random number combination\n      const randomNumberCombination = await this.randomNumberDao.fetch();\n      gameCreateInfo['combination'] = randomNumberCombination;\n      gameCreateInfo['turnCount'] = 0;\n      gameCreateInfo['currentTurn'] = 0;\n      const gameCreateResult = await game.create(gameCreateInfo)\n\n      return gameCreateResult;\n    } catch(err) {\n      throw new Error(err.message || 'Some error occurred while creating the Game.')\n    }\n  }\n\n  async fetchActiveWithPlayersAndGuesses(){\n    const includes = []\n    const where = {};\n\n    includes.push({\n      all: true,\n      nested: true,\n    });\n\n    where['deletedAt'] = {[Op.eq]: null};\n\n    try {\n\t\t\tconst gameSearchResults = await game.findAll({\n        where: where,\n        include: includes,\n        limit: 1, // default: 50\n        offset: 0, // default: 0\n        order: [['gameId', 'DESC']],\n      });\n\t\t\treturn gameSearchResults;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message || 'Some error occurred while retrieving games.');\n\t\t}\n  }\n\n  async search(gameSearchCriteria, limit, offset, isHistorical, allActiveAndHistorical) {\n\n    const { winnerName, playerName } = gameSearchCriteria;\n\n    const includes = []\n    const where = {};\n\n    if(playerName) {\n      includes.push({\n        model: player,\n        as: 'players',\n        where: { name: `${playerName}`},\n      });\n    }\n\n    if(winnerName) {\n      includes.push({\n        model: player,\n        as: 'players',\n        where: { name: `${winnerName}`},\n        force: true\n      });\n    }\n\n    let paranoid;\n\n    if(isHistorical || allActiveAndHistorical) {\n      paranoid = false;\n      if(allActiveAndHistorical) {\n        where['deletedAt']\n      }\n      if(isHistorical) where['deletedAt'] = {[Op.ne]: null};\n      else if(!allActiveAndHistorical) where['deletedAt'] = {[Op.eq]: null};\n  \n    }\n\n    try {\n\t\t\tconst gameSearchResults = await game.findAll({\n        where: where,\n        include: includes,\n        limit: limit || 50, // default: 50\n        offset: offset || 0, // default: 0\n        order: [['gameId', 'DESC']],\n        paranoid,\n      });\n\t\t\treturn gameSearchResults;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message || 'Some error occurred while retrieving games.');\n\t\t}\n  }\n\n  async fetch(gameId) {\n\t\ttry {\n\t\t\tconst gameFetchResult = await game.findByPk(gameId);\n\n\t\t\tif(gameFetchResult === undefined || gameFetchResult === null) {\n\t\t\t\tthrow new Error(`No game exists with gameId: [${gameId}]`);\n\t\t\t}\n      return gameFetchResult;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message);\n\t\t}\n  }\n\n  async update(gameId, gameUpdateInfo) {\n\t\ttry {\n\t\t\t// Returns number of games updated.\n\t\t\tconst game = await this.fetch(gameId);\n\n      const { turnCount, currentTurn, winner } = gameUpdateInfo;\n\n      game.set({\n        turnCount: turnCount === 0 ? 0 : turnCount || game.turnCount,\n        currentTurn: currentTurn === 0 ? 0 : currentTurn || game.currentTurn,\n        winner: winner || game.winner,\n      })\n\n      const gameUpdateResult =  await game.save();\n\t\t\treturn gameUpdateResult;\n\t\t} catch(err) {\n      throw new Error(err.message);\n\t\t}\n  }\n\n  // cascading soft delete\n  async delete(gameId) {\n    try {\n\n      const playerIdsByGame = await this.playerDao.search({gameId});\n      const playerIds = playerIdsByGame.flatMap((players) => players);\n\n      await guess.destroy({\n        where: { playerId: { [Op.in]: playerIds}},\n      });\n      await player.destroy({\n        where: { gameId: gameId },\n      });\n      await game.destroy({\n        where: {gameId: gameId},\n      });\n      return [gameId];\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n\n  // cascading soft deleteAll\n  async deleteAll() {\n    try {\n\n      // Collect all active games\n      await guess.destroy({\n        where: {},\n      });\n      await player.destroy({\n        where: {},\n      });\n      await game.destroy({\n        where: {},\n      });\n\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n}"]}