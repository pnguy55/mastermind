{"version":3,"sources":["../../src/data/GameDao.js"],"names":["GameDao","constructor","playerDao","PlayerDao","randomNumberDao","RandomNumberDao","create","gameCreateInfo","randomNumberCombination","fetch","gameCreateResult","game","err","Error","message","fetchActiveWithPlayersAndGuesses","includes","where","push","model","player","required","as","include","guess","gameSearchResults","findAll","logging","sql","queryObject","console","log","limit","offset","order","search","gameSearchCriteria","isHistorical","allActiveAndHistorical","winnerName","playerName","name","force","paranoid","Op","ne","eq","gameId","gameFetchResult","findByPk","undefined","update","gameUpdateInfo","turnCount","currentTurn","winner","set","gameUpdateResult","save","delete","playerIdsByGame","playerIds","flatMap","players","destroy","playerId","in","deleteAll"],"mappings":"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","file":"GameDao.js","sourcesContent":["import { game, player, guess } from '../db/sequelize';\nimport PlayerDao from './PlayerDao';\nimport RandomNumberDao from './RandomNumberDao';\nimport { Op } from 'sequelize';\n\nexport default class GameDao {\n\tconstructor() {\n    this.playerDao = new PlayerDao();\n    this.randomNumberDao = new RandomNumberDao();\n\t}\n  \n  async create(gameCreateInfo) {\n    // Create a Game\n    // Save Game in the database\n    try {\n\n      // automatically set random number combination\n      const randomNumberCombination = await this.randomNumberDao.fetch();\n      gameCreateInfo['combination'] = randomNumberCombination;\n      gameCreateInfo['turnCount'] = 0;\n      gameCreateInfo['currentTurn'] = 0;\n      const gameCreateResult = await game.create(gameCreateInfo)\n\n      return gameCreateResult;\n    } catch(err) {\n      throw new Error(err.message || 'Some error occurred while creating the Game.')\n    }\n  }\n\n  async fetchActiveWithPlayersAndGuesses(){\n    const includes = []\n    const where = {};\n\n    includes.push({\n      model: player,\n      required: true,\n      as: 'players',\n      include: [{\n        model: guess,\n        as: 'guesses',\n      }]\n    })\n\n    try {\n\t\t\tconst gameSearchResults = await game.findAll({  \n        logging: (sql, queryObject) => {\n          console.log(sql)\n        },\n        where: where,\n        include: includes,\n        limit: 1, // default: 50\n        offset: 0, // default: 0\n        order: [\n          ['gameId', 'DESC'],\n          [{model: player, as: 'players'}, 'playerId', 'ASC'],\n          [{model: player, as: 'players'}, {model: guess, as: 'guesses'}, 'guessId', 'ASC']\n       ],\n      });\n\t\t\treturn gameSearchResults;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message || 'Some error occurred while retrieving games.');\n\t\t}\n  }\n\n  async search(gameSearchCriteria, limit, offset, isHistorical, allActiveAndHistorical) {\n\n    const { winnerName, playerName } = gameSearchCriteria;\n\n    const includes = []\n    const where = {};\n\n    if(playerName) {\n      includes.push({\n        model: player,\n        as: 'players',\n        where: { name: `${playerName}`},\n      });\n    }\n\n    if(winnerName) {\n      includes.push({\n        model: player,\n        as: 'players',\n        where: { name: `${winnerName}`},\n        force: true\n      });\n    }\n\n    let paranoid;\n\n    if(isHistorical || allActiveAndHistorical) {\n      paranoid = false;\n      if(allActiveAndHistorical) {\n        where['deletedAt']\n      }\n      if(isHistorical) where['deletedAt'] = {[Op.ne]: null};\n      else if(!allActiveAndHistorical) where['deletedAt'] = {[Op.eq]: null};\n  \n    }\n\n    try {\n\t\t\tconst gameSearchResults = await game.findAll({\n        where: where,\n        include: includes,\n        limit: limit || 50, // default: 50\n        offset: offset || 0, // default: 0\n        order: [['gameId', 'DESC']],\n        paranoid,\n      });\n\t\t\treturn gameSearchResults;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message || 'Some error occurred while retrieving games.');\n\t\t}\n  }\n\n  async fetch(gameId) {\n\t\ttry {\n\t\t\tconst gameFetchResult = await game.findByPk(gameId);\n\n\t\t\tif(gameFetchResult === undefined || gameFetchResult === null) {\n\t\t\t\tthrow new Error(`No game exists with gameId: [${gameId}]`);\n\t\t\t}\n      return gameFetchResult;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message);\n\t\t}\n  }\n\n  async update(gameId, gameUpdateInfo) {\n\t\ttry {\n\t\t\t// Returns number of games updated.\n\t\t\tconst game = await this.fetch(gameId);\n\n      const { turnCount, currentTurn, winner } = gameUpdateInfo;\n\n      game.set({\n        turnCount: turnCount === 0 ? 0 : turnCount || game.turnCount,\n        currentTurn: currentTurn === 0 ? 0 : currentTurn || game.currentTurn,\n        winner: winner || game.winner,\n      })\n\n      const gameUpdateResult =  await game.save();\n\t\t\treturn gameUpdateResult;\n\t\t} catch(err) {\n      throw new Error(err.message);\n\t\t}\n  }\n\n  // cascading soft delete\n  async delete(gameId) {\n    try {\n\n      const playerIdsByGame = await this.playerDao.search({gameId});\n      const playerIds = playerIdsByGame.flatMap((players) => players);\n\n      await guess.destroy({\n        where: { playerId: { [Op.in]: playerIds}},\n      });\n      await player.destroy({\n        where: { gameId: gameId },\n      });\n      await game.destroy({\n        where: {gameId: gameId},\n      });\n      return [gameId];\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n\n  // cascading soft deleteAll\n  async deleteAll() {\n    try {\n\n      // Collect all active games\n      await guess.destroy({\n        where: {},\n      });\n      await player.destroy({\n        where: {},\n      });\n      await game.destroy({\n        where: {},\n      });\n\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n}"]}