{"version":3,"sources":["../../src/data/PlayerDao.js"],"names":["PlayerDao","constructor","create","playerCreateInfo","games","game","findAll","where","deletedAt","Op","eq","activeGame","length","Error","currentGame","numberOfActivePlayers","search","turnNumber","gameId","score","playerCreateResult","player","err","message","playerSearchCriteria","limit","offset","isHistorical","playerName","includes","ne","playerSearchResults","include","order","fetch","playerId","playerFetchResult","findByPk","undefined","update","playerUpdateInfo","name","set","playerUpdateResult","save","delete","guess","destroy","deleteAll","playerIds","map","in"],"mappings":"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","file":"PlayerDao.js","sourcesContent":["import { player, guess, game } from '../db/sequelize';\nimport { Op } from 'sequelize';\nimport GameDao from './GameDao';\n\nexport default class PlayerDao {\n\tconstructor() {\n\t}\n  \n  async create(playerCreateInfo) {\n    // Create a Player\n    // Save Player in the database\n    try {\n      // TODO: generate player turn number here\n      \n      const games = await game.findAll({ where: { deletedAt: {[Op.eq]: null}}});\n\n      const activeGame = games.length > 0;\n\n      if(!activeGame) throw new Error('No active game. Cannot create a player.');\n      const currentGame = games[0];\n\n      const numberOfActivePlayers = (await this.search({})).length;\n      playerCreateInfo.turnNumber = numberOfActivePlayers;\n      playerCreateInfo.gameId = currentGame.gameId;\n      playerCreateInfo.score = 0;\n\n      const playerCreateResult = await player.create(playerCreateInfo)\n\n      return playerCreateResult;\n    } catch(err) {\n      throw new Error(err.message || 'Some error occurred while creating the Player.')\n    }\n  }\n\n  async search(playerSearchCriteria, limit, offset, isHistorical) {\n\n    const { playerName, gameId } = playerSearchCriteria;\n\n    const includes = []\n    const where = {};\n\n    if(gameId) {\n      where['gameId'] = gameId;\n    }\n    if(playerName) {\n      where['playerName'] = playerName;\n    }\n\n\n    if(isHistorical) where['deletedAt'] = {[Op.ne]: null};\n    else where['deletedAt'] = {[Op.eq]: null};\n\n    try {\n\t\t\tconst playerSearchResults = await player.findAll({\n        where: where,\n        include: includes,\n        limit: limit || 50, // default: 50\n        offset: offset || 0, // default: 0\n        order: [['playerId', 'ASC']],\n      });\n\t\t\treturn playerSearchResults;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message || 'Some error occurred while retrieving players.');\n\t\t}\n  }\n\n  async fetch(playerId) {\n\t\ttry {\n\t\t\tconst playerFetchResult = await player.findByPk(playerId);\n\n\t\t\tif(playerFetchResult === undefined) {\n\t\t\t\tthrow new Error(`No player exists with playerId: [${playerId}]`);\n\t\t\t}\n      return playerFetchResult;\n\t\t} catch(err) {\n\t\t\tthrow new Error(err.message);\n\t\t}\n  }\n\n  async update(playerId, playerUpdateInfo) {\n\t\ttry {\n\t\t\t// Returns number of players updated.\n\t\t\tconst player = await this.fetch(playerId);\n\n      const { name, score } = playerUpdateInfo;\n\n      player.set({\n        name: name || player.name,\n        score: score === 0 ? 0 : score || player.score,\n      })\n\n      const playerUpdateResult =  await player.save();\n\t\t\treturn playerUpdateResult;\n\t\t} catch(err) {\n      throw new Error(err.message);\n\t\t}\n  }\n\n  // cascading soft delete\n  async delete(playerId) {\n    try {\n      await guess.destroy({\n        where: { playerId: playerId},\n      });\n      await player.destroy({\n        where: {playerId: playerId}\n      });\n      return [playerId];\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n\n  // cascading soft deleteAll\n  async deleteAll() {\n    try {\n      const playerIds = (await this.search({})).map(({playerId}) => playerId);\n\n      await guess.destroy({\n        where: { playerId: { [Op.in]: playerIds}},\n      });\n      await player.destroy({where: {}});\n\n      return [playerIds];\n    } catch(err) {\n      throw new Error(err.message);\n    }\n  }\n}"]}