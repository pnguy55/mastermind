{"version":3,"sources":["../../src/controllers/GameController.js"],"names":["GameController","constructor","gameDao","GameDao","create","req","res","body","playerCount","parseInt","err","status","send","message","gameCreateInfo","gameCreateMessage","setHeader","JSON","stringify","search","query","limit","offset","isHistorical","winnerName","playerName","undefined","parse","toLowerCase","gameSearchCriteria","gameSearchResults","fetch","params","gameId","id","replace","gameFetchResult","update","turnCount","currentTurn","winner","gameUpdateInfo","gameUpdateResult","delete","gameDeleteResult","deleteAll","gameDeleteAllResult"],"mappings":"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","file":"GameController.js","sourcesContent":["import verify from '../helpers/verifyMandatoryFieldsDefined';\nimport verifyInteger from '../helpers/verifyInteger';\nimport GameDao from '../data/GameDao';\n\nexport default class GameController {\n\tconstructor() {\n\t\tthis.gameDao = new GameDao();\n\t}\n\n\tasync create(req, res) {\n\t\tconst { body } = req;\n\t\tlet { playerCount} = body;\n\t\t// Validate request\n\t\ttry {\n\t\t\tverify(\n\t\t\t\tbody, \n\t\t\t\t[\n\t\t\t\t\t'playerCount', \n\t\t\t\t]\n\t\t\t);\n\t\t\tplayerCount = parseInt(playerCount);\n\t\t\tverifyInteger(playerCount);\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst gameCreateInfo = {\n\t\t\tplayerCount: playerCount, // integer\n\t\t}\n\n\t\t// access dao to create game\n\t\ttry {\n\t\t\tconst gameCreateMessage = await this.gameDao.create(gameCreateInfo)\n\t\t\t\t\n\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\tres.send(JSON.stringify(gameCreateMessage, null, 2));\n\t\t} catch(err) {\n\t\t\tres.status(500).send({\n        message: err.message,\n      });\n\t\t}\n\t}\n\n\tasync search(req, res) {\n\n\t\tconst { query } = req;\n\t\tlet { limit, offset, isHistorical, winnerName, playerName } = query;\n\t\t// validate params\n\t\ttry {\n\t\t\tif(limit !== undefined) {\n\t\t\t\tlimit = parseInt(limit);\n\t\t\t\tverifyInteger(limit, 'limit');\n\t\t\t}\n\t\t\tif(offset !== undefined) {\n\t\t\t\toffset = parseInt(offset);\n\t\t\t\tverifyInteger(offset, 'offset');\n\t\t\t}\n\t\t\tif(isHistorical === undefined) {\n\t\t\t\tisHistorical = false;\n\t\t\t} else {\n\t\t\t\tisHistorical = JSON.parse(isHistorical.toLowerCase()) ? true : false;\t\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst gameSearchCriteria = {\n\t\t\twinnerName: winnerName, // string, exact match\n\t\t\tplayerName: playerName, // string, exact match\n\t\t}\n\n\t\ttry {\n\t\t\tconst gameSearchResults = await this.gameDao.search(gameSearchCriteria, limit, offset, isHistorical);\n\t\t\t\n\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\tres.send(JSON.stringify(gameSearchResults, null, 2));\n\t\t} catch(err) {\n\t\t\tres.status(500).send({\n\t\t\t\tmessage:\n\t\t\t\t\terr.message,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync fetch(req, res) {\n\t\tconst { params } = req;\n\n\t\tlet gameId;\n\t\t// Validate request\n\t\ttry {\n\t\t\tverify(params, ['id']);\n\t\t\tgameId = parseInt(params.id.replace(':',''));\n\t\t\tverifyInteger(gameId);\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t// fetch game\n\t\ttry {\n\t\t\tconst gameFetchResult = await this.gameDao.fetch(gameId);\n\t\t\tif(gameFetchResult !== undefined) {\t\t\t\n\t\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\t\tres.send(JSON.stringify(gameFetchResult, null, 2));\n\t\t\t}\n\t\t} catch(err){\n\t\t\tres.status(404).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync update(req, res) {\n\t\tconst { body, params } = req;\n\t\tlet { turnCount, currentTurn, winner } = body;\n\n\t\t// Validate request\n\t\tlet gameId;\n\t\ttry {\n\t\t\tverify(params, ['id']);\t\t\t\n\t\t\tgameId = parseInt(params.id.replace(':',''));\n\t\t\tverifyInteger(gameId);\n\n\t\t\tif(turnCount !== undefined) {\n\t\t\t\tturnCount = parseInt(turnCount);\n\t\t\t\tverifyInteger(turnCount, 'turnCount');\n\t\t\t}\n\t\t\tif(currentTurn !== undefined) {\n\t\t\t\tcurrentTurn = parseInt(currentTurn);\n\t\t\t\tverifyInteger(currentTurn, 'currentTurn');\n\t\t\t}\n\t\t\tif(winner !== undefined) {\n\t\t\t\twinner = parseInt(winner);\n\t\t\t\tverifyInteger(winner, 'winner');\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst gameUpdateInfo = {\n\t\t\tturnCount: turnCount,\n\t\t\tcurrentTurn: currentTurn,\n\t\t\twinner: winner,\n\t\t}\n\n\t\ttry {\n\t\t\t// Returns number of games updated.\n\t\t\tconst gameUpdateResult = await this.gameDao.update(gameId,\tgameUpdateInfo);\n\n\t\t\tif (gameUpdateResult !== undefined) {\t\t\t\n\t\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\t\tres.send(JSON.stringify(gameUpdateResult, null, 2));\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(500).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n\t\n\tasync delete(req, res) {\n\t\tconst { params } = req;\n\n\t\tlet gameId;\n\t\t// Validate request\n\t\ttry {\n\t\t\tverify(params, ['id']);\n\t\t\tgameId = parseInt(params.id.replace(':',''));\n\t\t\tverifyInteger(gameId);\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst gameDeleteResult = await this.gameDao.delete(gameId);\n\t\t\tres.send({\n\t\t\t\tmessage: 'Game was deleted successfully!',\n\t\t\t});\n\t\t} catch(err){\n\t\t\tres.status(500).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync deleteAll(req, res) {\n\t\ttry {\n\t\t\tconst gameDeleteAllResult = await this.gameDao.deleteAll();\n\t\t\tres.send({\n\t\t\t\tmessage: 'Games were all deleted successfully!',\n\t\t\t});\n\t\t} catch(err){\n\t\t\tres.status(500).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n}\n"]}