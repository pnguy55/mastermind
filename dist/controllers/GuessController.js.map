{"version":3,"sources":["../../src/controllers/GuessController.js"],"names":["GuessController","constructor","guessDao","GuessDao","create","req","res","body","playerId","guess","parseInt","err","status","send","message","guessCreateInfo","guessCreateMessage","setHeader","JSON","stringify","search","query","limit","offset","isHistorical","playerName","undefined","parse","toLowerCase","guessSearchCriteria","guessSearchResults","fetch","params","guessId","id","replace","guessFetchResult","delete","deleteAll","guessDeleteAllResult"],"mappings":"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","file":"GuessController.js","sourcesContent":["import verify from '../helpers/verifyMandatoryFieldsDefined';\nimport verifyInteger from '../helpers/verifyInteger';\nimport GuessDao from '../data/GuessDao';\n\nexport default class GuessController {\n\tconstructor() {\n\t\tthis.guessDao = new GuessDao();\n\t}\n\n\tasync create(req, res) {\n\t\tconst { body } = req;\n\t\tlet { playerId, guess } = body;\n\t\t// Validate request\n\t\ttry {\n\t\t\tverify(\n\t\t\t\tbody, \n\t\t\t\t[\n\t\t\t\t\t'playerId',\n\t\t\t\t\t'guess', \n\t\t\t\t]\n\t\t\t);\n\t\t\tplayerId = parseInt(playerId);\n\t\t\tverifyInteger(playerId);\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst guessCreateInfo = {\n\t\t\tplayerId: playerId, // integer\n\t\t\tguess: guess, // string\n\t\t}\n\n\t\t// access dao to create guess\n\t\ttry {\n\t\t\tconst guessCreateMessage = await this.guessDao.create(guessCreateInfo)\n\t\t\t\t\n\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\tres.send(JSON.stringify(guessCreateMessage, null, 2));\n\t\t} catch(err) {\n\t\t\tres.status(500).send({\n        message: err.message,\n      });\n\t\t}\n\t}\n\n\tasync search(req, res) {\n\n\t\tconst { query } = req;\n\t\tlet { limit, offset, isHistorical, playerName } = query;\n\t\t// validate params\n\t\ttry {\n\t\t\tif(limit !== undefined) {\n\t\t\t\tlimit = parseInt(limit);\n\t\t\t\tverifyInteger(limit, 'limit');\n\t\t\t}\n\t\t\tif(offset !== undefined) {\n\t\t\t\toffset = parseInt(offset);\n\t\t\t\tverifyInteger(offset, 'offset');\n\t\t\t}\n\t\t\tif(isHistorical === undefined) {\n\t\t\t\tisHistorical = false;\n\t\t\t} else {\n\t\t\t\tisHistorical = JSON.parse(isHistorical.toLowerCase()) ? true : false;\t\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst guessSearchCriteria = {\n\t\t\tplayerName: playerName, // string, exact match\n\t\t}\n\n\t\ttry {\n\t\t\tconst guessSearchResults = await this.guessDao.search(guessSearchCriteria, limit, offset, isHistorical);\n\t\t\t\n\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\tres.send(JSON.stringify(guessSearchResults, null, 2));\n\t\t} catch(err) {\n\t\t\tres.status(500).send({\n\t\t\t\tmessage:\n\t\t\t\t\terr.message,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync fetch(req, res) {\n\t\tconst { params } = req;\n\n\t\tlet guessId;\n\t\t// Validate request\n\t\ttry {\n\t\t\tverify(params, ['id']);\n\t\t\tguessId = parseInt(params.id.replace(':',''));\n\t\t\tverifyInteger(guessId);\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t// fetch guess\n\t\ttry {\n\t\t\tconst guessFetchResult = await this.guessDao.fetch(guessId);\n\t\t\tif(guessFetchResult !== undefined) {\t\t\t\n\t\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\t\tres.send(JSON.stringify(guessFetchResult, null, 2));\n\t\t\t}\n\t\t} catch(err){\n\t\t\tres.status(404).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n\t\n\tasync delete(req, res) {\n\t\tconst { params } = req;\n\n\t\tlet guessId;\n\t\t// Validate request\n\t\ttry {\n\t\t\tverify(params, ['id']);\n\t\t\tguessId = parseInt(params.id.replace(':',''));\n\t\t\tverifyInteger(guessId);\n\t\t} catch(err) {\n\t\t\tres.status(400).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.guessDao.delete(guessId);\n\t\t\tres.send({\n\t\t\t\tmessage: 'Guess was deleted successfully!',\n\t\t\t});\n\t\t} catch(err){\n\t\t\tres.status(500).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n\n\tasync deleteAll(req, res) {\n\t\ttry {\n\t\t\tconst guessDeleteAllResult = await this.guessDao.deleteAll();\n\t\t\tres.send({\n\t\t\t\tmessage: 'Guesss were all deleted successfully!',\n\t\t\t});\n\t\t} catch(err){\n\t\t\tres.status(500).send({\n\t\t\t\tmessage: err.message,\n\t\t\t});\n\t\t}\n\t}\n}\n"]}